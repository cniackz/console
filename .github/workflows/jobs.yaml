name: Workflow

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

# This ensures that previous jobs for the PR are canceled when the PR is
# updated.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:


  b-integration-tests:
    name: Integration Tests with Latest Distributed MinIO

    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [ 1.18.x ]

    steps:
      - name: Set up Go ${{ matrix.go-version }} on ${{ matrix.os }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
        id: go

      - name: Check out code
        uses: actions/checkout@v2

      # To build minio image, we need to clone the repository first
      - name: clone https://github.com/minio/minio
        uses: actions/checkout@master
        with:

          # Repository name with owner. For example, actions/checkout
          # Default: ${{ github.repository }}
          repository: minio/minio
          
          # Relative path under $GITHUB_WORKSPACE to place the repository
          # To have two repositories under the same test
          path: 'minio_repository'

      - uses: actions/cache@v3
        name: Go Mod Cache
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ github.run_id }}

      - name: Build on ${{ matrix.os }}
        run: |
          echo "The idea is to build minio image from downloaded repository";
          cd $GITHUB_WORKSPACE/minio_repository;
          echo "Get git version to build MinIO Image";
          VERSION=`git rev-parse HEAD`;
          echo $VERSION;
          echo "Create minio image";
          make docker VERSION=$VERSION;
          echo "Jumping back to console repository to run the integration test"
          cd $GITHUB_WORKSPACE;
          echo "We are going to use the built image on test-integration";
          VERSION="minio/minio:$VERSION";
          echo $VERSION;
          
          echo "Create bucket for replication with versioning"
          echo "Download mc for Ubuntu"
          wget -q https://dl.min.io/client/mc/release/linux-amd64/mc
          echo "Change the permissions to execute mc command"
          chmod +x mc
          echo "Create the folder to put the all.out file"
          TARGET_BUCKET=`echo $RANDOM | md5sum | head -c 20; echo;`
          echo "TARGET_BUCKET: ${TARGET_BUCKET}"
          echo "Only run our test if play is up and running..."
          PLAY_IS_ON=`wget --spider --server-response https://play.min.io:9443/login 2>&1 | grep '200\ OK' | wc -l`
          if [ $PLAY_IS_ON == 1 ]
          then
            echo "Play is up and running, we will proceed with the test"
          else
            echo "Play is down, please report it on hack channel"
            exit
          fi
          ./mc mb --ignore-existing play/${TARGET_BUCKET}/
          ./mc version enable play/${TARGET_BUCKET}
          # Via API we are going to test:
          # mc admin bucket remote add myminio/source https://minioadmin:minioadmin@play.min.io/target --service "replication"
          # expected output is: Remote ARN = `arn:minio:replication::f5bdb8d7-541d-415e-aaf4-592979484ba9:target`.
          
          make test-integration MINIO_VERSION=$VERSION TARGET_BUCKET=$TARGET_BUCKET;

      - uses: actions/cache@v3
        id: coverage-cache
        name: Coverage Cache
        with:
          path: |
            ./integration/coverage/
          key: ${{ runner.os }}-coverage-2-${{ github.run_id }}
